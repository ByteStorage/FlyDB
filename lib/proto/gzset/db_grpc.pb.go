// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: lib/proto/gzset/db.proto

package gzset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GZSetService_ZAdd_FullMethodName      = "/gzset.GZSetService/ZAdd"
	GZSetService_ZAdds_FullMethodName     = "/gzset.GZSetService/ZAdds"
	GZSetService_ZRem_FullMethodName      = "/gzset.GZSetService/ZRem"
	GZSetService_ZRems_FullMethodName     = "/gzset.GZSetService/ZRems"
	GZSetService_ZScore_FullMethodName    = "/gzset.GZSetService/ZScore"
	GZSetService_ZRank_FullMethodName     = "/gzset.GZSetService/ZRank"
	GZSetService_ZRevRank_FullMethodName  = "/gzset.GZSetService/ZRevRank"
	GZSetService_ZRange_FullMethodName    = "/gzset.GZSetService/ZRange"
	GZSetService_ZCount_FullMethodName    = "/gzset.GZSetService/ZCount"
	GZSetService_ZRevRange_FullMethodName = "/gzset.GZSetService/ZRevRange"
	GZSetService_ZCard_FullMethodName     = "/gzset.GZSetService/ZCard"
	GZSetService_ZIncrBy_FullMethodName   = "/gzset.GZSetService/ZIncrBy"
)

// GZSetServiceClient is the client API for GZSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GZSetServiceClient interface {
	ZAdd(ctx context.Context, in *ZAddRequest, opts ...grpc.CallOption) (*ZAddResponse, error)
	ZAdds(ctx context.Context, in *ZAddsRequest, opts ...grpc.CallOption) (*ZAddsResponse, error)
	ZRem(ctx context.Context, in *ZRemRequest, opts ...grpc.CallOption) (*ZRemResponse, error)
	ZRems(ctx context.Context, in *ZRemsRequest, opts ...grpc.CallOption) (*ZRemsResponse, error)
	ZScore(ctx context.Context, in *ZScoreRequest, opts ...grpc.CallOption) (*ZScoreResponse, error)
	ZRank(ctx context.Context, in *ZRankRequest, opts ...grpc.CallOption) (*ZRankResponse, error)
	ZRevRank(ctx context.Context, in *ZRevRankRequest, opts ...grpc.CallOption) (*ZRevRankResponse, error)
	ZRange(ctx context.Context, in *ZRangeRequest, opts ...grpc.CallOption) (*ZRangeResponse, error)
	ZCount(ctx context.Context, in *ZCountRequest, opts ...grpc.CallOption) (*ZCountResponse, error)
	ZRevRange(ctx context.Context, in *ZRevRangeRequest, opts ...grpc.CallOption) (*ZRevRangeResponse, error)
	ZCard(ctx context.Context, in *ZCardRequest, opts ...grpc.CallOption) (*ZCardResponse, error)
	ZIncrBy(ctx context.Context, in *ZIncrByRequest, opts ...grpc.CallOption) (*ZIncrByResponse, error)
}

type gZSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGZSetServiceClient(cc grpc.ClientConnInterface) GZSetServiceClient {
	return &gZSetServiceClient{cc}
}

func (c *gZSetServiceClient) ZAdd(ctx context.Context, in *ZAddRequest, opts ...grpc.CallOption) (*ZAddResponse, error) {
	out := new(ZAddResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZAdds(ctx context.Context, in *ZAddsRequest, opts ...grpc.CallOption) (*ZAddsResponse, error) {
	out := new(ZAddsResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZAdds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZRem(ctx context.Context, in *ZRemRequest, opts ...grpc.CallOption) (*ZRemResponse, error) {
	out := new(ZRemResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZRem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZRems(ctx context.Context, in *ZRemsRequest, opts ...grpc.CallOption) (*ZRemsResponse, error) {
	out := new(ZRemsResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZRems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZScore(ctx context.Context, in *ZScoreRequest, opts ...grpc.CallOption) (*ZScoreResponse, error) {
	out := new(ZScoreResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZRank(ctx context.Context, in *ZRankRequest, opts ...grpc.CallOption) (*ZRankResponse, error) {
	out := new(ZRankResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZRevRank(ctx context.Context, in *ZRevRankRequest, opts ...grpc.CallOption) (*ZRevRankResponse, error) {
	out := new(ZRevRankResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZRevRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZRange(ctx context.Context, in *ZRangeRequest, opts ...grpc.CallOption) (*ZRangeResponse, error) {
	out := new(ZRangeResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZCount(ctx context.Context, in *ZCountRequest, opts ...grpc.CallOption) (*ZCountResponse, error) {
	out := new(ZCountResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZRevRange(ctx context.Context, in *ZRevRangeRequest, opts ...grpc.CallOption) (*ZRevRangeResponse, error) {
	out := new(ZRevRangeResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZRevRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZCard(ctx context.Context, in *ZCardRequest, opts ...grpc.CallOption) (*ZCardResponse, error) {
	out := new(ZCardResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gZSetServiceClient) ZIncrBy(ctx context.Context, in *ZIncrByRequest, opts ...grpc.CallOption) (*ZIncrByResponse, error) {
	out := new(ZIncrByResponse)
	err := c.cc.Invoke(ctx, GZSetService_ZIncrBy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GZSetServiceServer is the server API for GZSetService service.
// All implementations must embed UnimplementedGZSetServiceServer
// for forward compatibility
type GZSetServiceServer interface {
	ZAdd(context.Context, *ZAddRequest) (*ZAddResponse, error)
	ZAdds(context.Context, *ZAddsRequest) (*ZAddsResponse, error)
	ZRem(context.Context, *ZRemRequest) (*ZRemResponse, error)
	ZRems(context.Context, *ZRemsRequest) (*ZRemsResponse, error)
	ZScore(context.Context, *ZScoreRequest) (*ZScoreResponse, error)
	ZRank(context.Context, *ZRankRequest) (*ZRankResponse, error)
	ZRevRank(context.Context, *ZRevRankRequest) (*ZRevRankResponse, error)
	ZRange(context.Context, *ZRangeRequest) (*ZRangeResponse, error)
	ZCount(context.Context, *ZCountRequest) (*ZCountResponse, error)
	ZRevRange(context.Context, *ZRevRangeRequest) (*ZRevRangeResponse, error)
	ZCard(context.Context, *ZCardRequest) (*ZCardResponse, error)
	ZIncrBy(context.Context, *ZIncrByRequest) (*ZIncrByResponse, error)
	mustEmbedUnimplementedGZSetServiceServer()
}

// UnimplementedGZSetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGZSetServiceServer struct {
}

func (UnimplementedGZSetServiceServer) ZAdd(context.Context, *ZAddRequest) (*ZAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (UnimplementedGZSetServiceServer) ZAdds(context.Context, *ZAddsRequest) (*ZAddsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdds not implemented")
}
func (UnimplementedGZSetServiceServer) ZRem(context.Context, *ZRemRequest) (*ZRemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRem not implemented")
}
func (UnimplementedGZSetServiceServer) ZRems(context.Context, *ZRemsRequest) (*ZRemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRems not implemented")
}
func (UnimplementedGZSetServiceServer) ZScore(context.Context, *ZScoreRequest) (*ZScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScore not implemented")
}
func (UnimplementedGZSetServiceServer) ZRank(context.Context, *ZRankRequest) (*ZRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRank not implemented")
}
func (UnimplementedGZSetServiceServer) ZRevRank(context.Context, *ZRevRankRequest) (*ZRevRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRevRank not implemented")
}
func (UnimplementedGZSetServiceServer) ZRange(context.Context, *ZRangeRequest) (*ZRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRange not implemented")
}
func (UnimplementedGZSetServiceServer) ZCount(context.Context, *ZCountRequest) (*ZCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZCount not implemented")
}
func (UnimplementedGZSetServiceServer) ZRevRange(context.Context, *ZRevRangeRequest) (*ZRevRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRevRange not implemented")
}
func (UnimplementedGZSetServiceServer) ZCard(context.Context, *ZCardRequest) (*ZCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZCard not implemented")
}
func (UnimplementedGZSetServiceServer) ZIncrBy(context.Context, *ZIncrByRequest) (*ZIncrByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZIncrBy not implemented")
}
func (UnimplementedGZSetServiceServer) mustEmbedUnimplementedGZSetServiceServer() {}

// UnsafeGZSetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GZSetServiceServer will
// result in compilation errors.
type UnsafeGZSetServiceServer interface {
	mustEmbedUnimplementedGZSetServiceServer()
}

func RegisterGZSetServiceServer(s grpc.ServiceRegistrar, srv GZSetServiceServer) {
	s.RegisterService(&GZSetService_ServiceDesc, srv)
}

func _GZSetService_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZAdd(ctx, req.(*ZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZAdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZAddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZAdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZAdds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZAdds(ctx, req.(*ZAddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZRem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZRem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZRem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZRem(ctx, req.(*ZRemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZRems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZRems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZRems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZRems(ctx, req.(*ZRemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZScore(ctx, req.(*ZScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZRank(ctx, req.(*ZRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZRevRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZRevRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZRevRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZRevRank(ctx, req.(*ZRevRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZRange(ctx, req.(*ZRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZCount(ctx, req.(*ZCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZRevRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZRevRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZRevRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZRevRange(ctx, req.(*ZRevRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZCard(ctx, req.(*ZCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GZSetService_ZIncrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZIncrByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GZSetServiceServer).ZIncrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GZSetService_ZIncrBy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GZSetServiceServer).ZIncrBy(ctx, req.(*ZIncrByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GZSetService_ServiceDesc is the grpc.ServiceDesc for GZSetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GZSetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gzset.GZSetService",
	HandlerType: (*GZSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZAdd",
			Handler:    _GZSetService_ZAdd_Handler,
		},
		{
			MethodName: "ZAdds",
			Handler:    _GZSetService_ZAdds_Handler,
		},
		{
			MethodName: "ZRem",
			Handler:    _GZSetService_ZRem_Handler,
		},
		{
			MethodName: "ZRems",
			Handler:    _GZSetService_ZRems_Handler,
		},
		{
			MethodName: "ZScore",
			Handler:    _GZSetService_ZScore_Handler,
		},
		{
			MethodName: "ZRank",
			Handler:    _GZSetService_ZRank_Handler,
		},
		{
			MethodName: "ZRevRank",
			Handler:    _GZSetService_ZRevRank_Handler,
		},
		{
			MethodName: "ZRange",
			Handler:    _GZSetService_ZRange_Handler,
		},
		{
			MethodName: "ZCount",
			Handler:    _GZSetService_ZCount_Handler,
		},
		{
			MethodName: "ZRevRange",
			Handler:    _GZSetService_ZRevRange_Handler,
		},
		{
			MethodName: "ZCard",
			Handler:    _GZSetService_ZCard_Handler,
		},
		{
			MethodName: "ZIncrBy",
			Handler:    _GZSetService_ZIncrBy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/proto/gzset/db.proto",
}
