// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: db.proto

package ghash

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GHashServiceClient is the client API for GHashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GHashServiceClient interface {
	HSet(ctx context.Context, in *GHashSetRequest, opts ...grpc.CallOption) (*GHashSetResponse, error)
	HGet(ctx context.Context, in *GHashGetRequest, opts ...grpc.CallOption) (*GHashGetResponse, error)
	HDel(ctx context.Context, in *GHashDelRequest, opts ...grpc.CallOption) (*GHashDelResponse, error)
}

type gHashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGHashServiceClient(cc grpc.ClientConnInterface) GHashServiceClient {
	return &gHashServiceClient{cc}
}

func (c *gHashServiceClient) HSet(ctx context.Context, in *GHashSetRequest, opts ...grpc.CallOption) (*GHashSetResponse, error) {
	out := new(GHashSetResponse)
	err := c.cc.Invoke(ctx, "/ghash.GHashService/HSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gHashServiceClient) HGet(ctx context.Context, in *GHashGetRequest, opts ...grpc.CallOption) (*GHashGetResponse, error) {
	out := new(GHashGetResponse)
	err := c.cc.Invoke(ctx, "/ghash.GHashService/HGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gHashServiceClient) HDel(ctx context.Context, in *GHashDelRequest, opts ...grpc.CallOption) (*GHashDelResponse, error) {
	out := new(GHashDelResponse)
	err := c.cc.Invoke(ctx, "/ghash.GHashService/HDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GHashServiceServer is the server API for GHashService service.
// All implementations must embed UnimplementedGHashServiceServer
// for forward compatibility
type GHashServiceServer interface {
	HSet(context.Context, *GHashSetRequest) (*GHashSetResponse, error)
	HGet(context.Context, *GHashGetRequest) (*GHashGetResponse, error)
	HDel(context.Context, *GHashDelRequest) (*GHashDelResponse, error)
	mustEmbedUnimplementedGHashServiceServer()
}

// UnimplementedGHashServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGHashServiceServer struct {
}

func (UnimplementedGHashServiceServer) HSet(context.Context, *GHashSetRequest) (*GHashSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HSet not implemented")
}
func (UnimplementedGHashServiceServer) HGet(context.Context, *GHashGetRequest) (*GHashGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGet not implemented")
}
func (UnimplementedGHashServiceServer) HDel(context.Context, *GHashDelRequest) (*GHashDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HDel not implemented")
}
func (UnimplementedGHashServiceServer) mustEmbedUnimplementedGHashServiceServer() {}

// UnsafeGHashServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GHashServiceServer will
// result in compilation errors.
type UnsafeGHashServiceServer interface {
	mustEmbedUnimplementedGHashServiceServer()
}

func RegisterGHashServiceServer(s grpc.ServiceRegistrar, srv GHashServiceServer) {
	s.RegisterService(&GHashService_ServiceDesc, srv)
}

func _GHashService_HSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GHashSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHashServiceServer).HSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghash.GHashService/HSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHashServiceServer).HSet(ctx, req.(*GHashSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GHashService_HGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GHashGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHashServiceServer).HGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghash.GHashService/HGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHashServiceServer).HGet(ctx, req.(*GHashGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GHashService_HDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GHashDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHashServiceServer).HDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghash.GHashService/HDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHashServiceServer).HDel(ctx, req.(*GHashDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GHashService_ServiceDesc is the grpc.ServiceDesc for GHashService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GHashService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ghash.GHashService",
	HandlerType: (*GHashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HSet",
			Handler:    _GHashService_HSet_Handler,
		},
		{
			MethodName: "HGet",
			Handler:    _GHashService_HGet_Handler,
		},
		{
			MethodName: "HDel",
			Handler:    _GHashService_HDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
