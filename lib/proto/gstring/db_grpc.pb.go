// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: lib/proto/gstring/db.proto

package gstring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GStringService_NewFlyDBService_FullMethodName = "/gstring.GStringService/NewFlyDBService"
	GStringService_Get_FullMethodName             = "/gstring.GStringService/Get"
	GStringService_Put_FullMethodName             = "/gstring.GStringService/Put"
	GStringService_Del_FullMethodName             = "/gstring.GStringService/Del"
	GStringService_Type_FullMethodName            = "/gstring.GStringService/Type"
	GStringService_StrLen_FullMethodName          = "/gstring.GStringService/StrLen"
	GStringService_GetSet_FullMethodName          = "/gstring.GStringService/GetSet"
	GStringService_Append_FullMethodName          = "/gstring.GStringService/Append"
	GStringService_Incr_FullMethodName            = "/gstring.GStringService/Incr"
	GStringService_IncrBy_FullMethodName          = "/gstring.GStringService/IncrBy"
	GStringService_IncrByFloat_FullMethodName     = "/gstring.GStringService/IncrByFloat"
	GStringService_Decr_FullMethodName            = "/gstring.GStringService/Decr"
	GStringService_DecrBy_FullMethodName          = "/gstring.GStringService/DecrBy"
	GStringService_Exists_FullMethodName          = "/gstring.GStringService/Exists"
	GStringService_Expire_FullMethodName          = "/gstring.GStringService/Expire"
	GStringService_Persist_FullMethodName         = "/gstring.GStringService/Persist"
	GStringService_MGet_FullMethodName            = "/gstring.GStringService/MGet"
	GStringService_MSet_FullMethodName            = "/gstring.GStringService/MSet"
	GStringService_MSetNX_FullMethodName          = "/gstring.GStringService/MSetNX"
)

// GStringServiceClient is the client API for GStringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GStringServiceClient interface {
	NewFlyDBService(ctx context.Context, in *FlyDBOption, opts ...grpc.CallOption) (*NewFlyDBResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	Type(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TypeResponse, error)
	StrLen(ctx context.Context, in *StrLenRequest, opts ...grpc.CallOption) (*StrLenResponse, error)
	GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*IncrResponse, error)
	IncrBy(ctx context.Context, in *IncrByRequest, opts ...grpc.CallOption) (*IncrByResponse, error)
	IncrByFloat(ctx context.Context, in *IncrByFloatRequest, opts ...grpc.CallOption) (*IncrByFloatResponse, error)
	Decr(ctx context.Context, in *DecrRequest, opts ...grpc.CallOption) (*DecrResponse, error)
	DecrBy(ctx context.Context, in *DecrByRequest, opts ...grpc.CallOption) (*DecrByResponse, error)
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ExpireResponse, error)
	Persist(ctx context.Context, in *PersistRequest, opts ...grpc.CallOption) (*PersistResponse, error)
	MGet(ctx context.Context, in *MGetRequest, opts ...grpc.CallOption) (*MGetResponse, error)
	MSet(ctx context.Context, in *MSetRequest, opts ...grpc.CallOption) (*MSetResponse, error)
	MSetNX(ctx context.Context, in *MSetNXRequest, opts ...grpc.CallOption) (*MSetNXResponse, error)
}

type gStringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGStringServiceClient(cc grpc.ClientConnInterface) GStringServiceClient {
	return &gStringServiceClient{cc}
}

func (c *gStringServiceClient) NewFlyDBService(ctx context.Context, in *FlyDBOption, opts ...grpc.CallOption) (*NewFlyDBResponse, error) {
	out := new(NewFlyDBResponse)
	err := c.cc.Invoke(ctx, GStringService_NewFlyDBService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, GStringService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Put(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, GStringService_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, GStringService_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Type(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TypeResponse, error) {
	out := new(TypeResponse)
	err := c.cc.Invoke(ctx, GStringService_Type_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) StrLen(ctx context.Context, in *StrLenRequest, opts ...grpc.CallOption) (*StrLenResponse, error) {
	out := new(StrLenResponse)
	err := c.cc.Invoke(ctx, GStringService_StrLen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error) {
	out := new(GetSetResponse)
	err := c.cc.Invoke(ctx, GStringService_GetSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, GStringService_Append_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*IncrResponse, error) {
	out := new(IncrResponse)
	err := c.cc.Invoke(ctx, GStringService_Incr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) IncrBy(ctx context.Context, in *IncrByRequest, opts ...grpc.CallOption) (*IncrByResponse, error) {
	out := new(IncrByResponse)
	err := c.cc.Invoke(ctx, GStringService_IncrBy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) IncrByFloat(ctx context.Context, in *IncrByFloatRequest, opts ...grpc.CallOption) (*IncrByFloatResponse, error) {
	out := new(IncrByFloatResponse)
	err := c.cc.Invoke(ctx, GStringService_IncrByFloat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Decr(ctx context.Context, in *DecrRequest, opts ...grpc.CallOption) (*DecrResponse, error) {
	out := new(DecrResponse)
	err := c.cc.Invoke(ctx, GStringService_Decr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) DecrBy(ctx context.Context, in *DecrByRequest, opts ...grpc.CallOption) (*DecrByResponse, error) {
	out := new(DecrByResponse)
	err := c.cc.Invoke(ctx, GStringService_DecrBy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, GStringService_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ExpireResponse, error) {
	out := new(ExpireResponse)
	err := c.cc.Invoke(ctx, GStringService_Expire_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) Persist(ctx context.Context, in *PersistRequest, opts ...grpc.CallOption) (*PersistResponse, error) {
	out := new(PersistResponse)
	err := c.cc.Invoke(ctx, GStringService_Persist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) MGet(ctx context.Context, in *MGetRequest, opts ...grpc.CallOption) (*MGetResponse, error) {
	out := new(MGetResponse)
	err := c.cc.Invoke(ctx, GStringService_MGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) MSet(ctx context.Context, in *MSetRequest, opts ...grpc.CallOption) (*MSetResponse, error) {
	out := new(MSetResponse)
	err := c.cc.Invoke(ctx, GStringService_MSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gStringServiceClient) MSetNX(ctx context.Context, in *MSetNXRequest, opts ...grpc.CallOption) (*MSetNXResponse, error) {
	out := new(MSetNXResponse)
	err := c.cc.Invoke(ctx, GStringService_MSetNX_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GStringServiceServer is the server API for GStringService service.
// All implementations must embed UnimplementedGStringServiceServer
// for forward compatibility
type GStringServiceServer interface {
	NewFlyDBService(context.Context, *FlyDBOption) (*NewFlyDBResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *SetRequest) (*SetResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	Type(context.Context, *TypeRequest) (*TypeResponse, error)
	StrLen(context.Context, *StrLenRequest) (*StrLenResponse, error)
	GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error)
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Incr(context.Context, *IncrRequest) (*IncrResponse, error)
	IncrBy(context.Context, *IncrByRequest) (*IncrByResponse, error)
	IncrByFloat(context.Context, *IncrByFloatRequest) (*IncrByFloatResponse, error)
	Decr(context.Context, *DecrRequest) (*DecrResponse, error)
	DecrBy(context.Context, *DecrByRequest) (*DecrByResponse, error)
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	Expire(context.Context, *ExpireRequest) (*ExpireResponse, error)
	Persist(context.Context, *PersistRequest) (*PersistResponse, error)
	MGet(context.Context, *MGetRequest) (*MGetResponse, error)
	MSet(context.Context, *MSetRequest) (*MSetResponse, error)
	MSetNX(context.Context, *MSetNXRequest) (*MSetNXResponse, error)
	mustEmbedUnimplementedGStringServiceServer()
}

// UnimplementedGStringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGStringServiceServer struct {
}

func (UnimplementedGStringServiceServer) NewFlyDBService(context.Context, *FlyDBOption) (*NewFlyDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFlyDBService not implemented")
}
func (UnimplementedGStringServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGStringServiceServer) Put(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedGStringServiceServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedGStringServiceServer) Type(context.Context, *TypeRequest) (*TypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Type not implemented")
}
func (UnimplementedGStringServiceServer) StrLen(context.Context, *StrLenRequest) (*StrLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrLen not implemented")
}
func (UnimplementedGStringServiceServer) GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (UnimplementedGStringServiceServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedGStringServiceServer) Incr(context.Context, *IncrRequest) (*IncrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Incr not implemented")
}
func (UnimplementedGStringServiceServer) IncrBy(context.Context, *IncrByRequest) (*IncrByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrBy not implemented")
}
func (UnimplementedGStringServiceServer) IncrByFloat(context.Context, *IncrByFloatRequest) (*IncrByFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrByFloat not implemented")
}
func (UnimplementedGStringServiceServer) Decr(context.Context, *DecrRequest) (*DecrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decr not implemented")
}
func (UnimplementedGStringServiceServer) DecrBy(context.Context, *DecrByRequest) (*DecrByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrBy not implemented")
}
func (UnimplementedGStringServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedGStringServiceServer) Expire(context.Context, *ExpireRequest) (*ExpireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expire not implemented")
}
func (UnimplementedGStringServiceServer) Persist(context.Context, *PersistRequest) (*PersistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Persist not implemented")
}
func (UnimplementedGStringServiceServer) MGet(context.Context, *MGetRequest) (*MGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGet not implemented")
}
func (UnimplementedGStringServiceServer) MSet(context.Context, *MSetRequest) (*MSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSet not implemented")
}
func (UnimplementedGStringServiceServer) MSetNX(context.Context, *MSetNXRequest) (*MSetNXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSetNX not implemented")
}
func (UnimplementedGStringServiceServer) mustEmbedUnimplementedGStringServiceServer() {}

// UnsafeGStringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GStringServiceServer will
// result in compilation errors.
type UnsafeGStringServiceServer interface {
	mustEmbedUnimplementedGStringServiceServer()
}

func RegisterGStringServiceServer(s grpc.ServiceRegistrar, srv GStringServiceServer) {
	s.RegisterService(&GStringService_ServiceDesc, srv)
}

func _GStringService_NewFlyDBService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlyDBOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).NewFlyDBService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_NewFlyDBService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).NewFlyDBService(ctx, req.(*FlyDBOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Put(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Type_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Type(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Type_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Type(ctx, req.(*TypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_StrLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrLenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).StrLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_StrLen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).StrLen(ctx, req.(*StrLenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_GetSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).GetSet(ctx, req.(*GetSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Incr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Incr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Incr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Incr(ctx, req.(*IncrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_IncrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).IncrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_IncrBy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).IncrBy(ctx, req.(*IncrByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_IncrByFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrByFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).IncrByFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_IncrByFloat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).IncrByFloat(ctx, req.(*IncrByFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Decr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Decr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Decr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Decr(ctx, req.(*DecrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_DecrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).DecrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_DecrBy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).DecrBy(ctx, req.(*DecrByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Expire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Expire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Expire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Expire(ctx, req.(*ExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_Persist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).Persist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_Persist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).Persist(ctx, req.(*PersistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_MGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).MGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_MGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).MGet(ctx, req.(*MGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_MSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).MSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_MSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).MSet(ctx, req.(*MSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GStringService_MSetNX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSetNXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GStringServiceServer).MSetNX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GStringService_MSetNX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GStringServiceServer).MSetNX(ctx, req.(*MSetNXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GStringService_ServiceDesc is the grpc.ServiceDesc for GStringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GStringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gstring.GStringService",
	HandlerType: (*GStringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewFlyDBService",
			Handler:    _GStringService_NewFlyDBService_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GStringService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _GStringService_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _GStringService_Del_Handler,
		},
		{
			MethodName: "Type",
			Handler:    _GStringService_Type_Handler,
		},
		{
			MethodName: "StrLen",
			Handler:    _GStringService_StrLen_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _GStringService_GetSet_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _GStringService_Append_Handler,
		},
		{
			MethodName: "Incr",
			Handler:    _GStringService_Incr_Handler,
		},
		{
			MethodName: "IncrBy",
			Handler:    _GStringService_IncrBy_Handler,
		},
		{
			MethodName: "IncrByFloat",
			Handler:    _GStringService_IncrByFloat_Handler,
		},
		{
			MethodName: "Decr",
			Handler:    _GStringService_Decr_Handler,
		},
		{
			MethodName: "DecrBy",
			Handler:    _GStringService_DecrBy_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _GStringService_Exists_Handler,
		},
		{
			MethodName: "Expire",
			Handler:    _GStringService_Expire_Handler,
		},
		{
			MethodName: "Persist",
			Handler:    _GStringService_Persist_Handler,
		},
		{
			MethodName: "MGet",
			Handler:    _GStringService_MGet_Handler,
		},
		{
			MethodName: "MSet",
			Handler:    _GStringService_MSet_Handler,
		},
		{
			MethodName: "MSetNX",
			Handler:    _GStringService_MSetNX_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/proto/gstring/db.proto",
}
