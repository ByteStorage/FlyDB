// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: lib/proto/gset/db.proto

package gset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GSetServiceClient is the client API for GSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GSetServiceClient interface {
	SAdd(ctx context.Context, in *SAddRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SAdds(ctx context.Context, in *SAddsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SRem(ctx context.Context, in *SRemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SRems(ctx context.Context, in *SRemsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SCard(ctx context.Context, in *SCardRequest, opts ...grpc.CallOption) (*SCardResponse, error)
	SMembers(ctx context.Context, in *SMembersRequest, opts ...grpc.CallOption) (*SMembersResponse, error)
	SIsMember(ctx context.Context, in *SIsMemberRequest, opts ...grpc.CallOption) (*SIsMemberResponse, error)
	SUnion(ctx context.Context, in *SUnionRequest, opts ...grpc.CallOption) (*SUnionResponse, error)
	SInter(ctx context.Context, in *SInterRequest, opts ...grpc.CallOption) (*SInterResponse, error)
	SDiff(ctx context.Context, in *SDiffRequest, opts ...grpc.CallOption) (*SDiffResponse, error)
	SUnionStore(ctx context.Context, in *SUnionStoreRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SInterStore(ctx context.Context, in *SInterStoreRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type gSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGSetServiceClient(cc grpc.ClientConnInterface) GSetServiceClient {
	return &gSetServiceClient{cc}
}

func (c *gSetServiceClient) SAdd(ctx context.Context, in *SAddRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SAdds(ctx context.Context, in *SAddsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SAdds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SRem(ctx context.Context, in *SRemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SRem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SRems(ctx context.Context, in *SRemsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SRems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SCard(ctx context.Context, in *SCardRequest, opts ...grpc.CallOption) (*SCardResponse, error) {
	out := new(SCardResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SMembers(ctx context.Context, in *SMembersRequest, opts ...grpc.CallOption) (*SMembersResponse, error) {
	out := new(SMembersResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SIsMember(ctx context.Context, in *SIsMemberRequest, opts ...grpc.CallOption) (*SIsMemberResponse, error) {
	out := new(SIsMemberResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SIsMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SUnion(ctx context.Context, in *SUnionRequest, opts ...grpc.CallOption) (*SUnionResponse, error) {
	out := new(SUnionResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SUnion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SInter(ctx context.Context, in *SInterRequest, opts ...grpc.CallOption) (*SInterResponse, error) {
	out := new(SInterResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SInter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SDiff(ctx context.Context, in *SDiffRequest, opts ...grpc.CallOption) (*SDiffResponse, error) {
	out := new(SDiffResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SUnionStore(ctx context.Context, in *SUnionStoreRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SUnionStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSetServiceClient) SInterStore(ctx context.Context, in *SInterStoreRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gset.GSetService/SInterStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GSetServiceServer is the server API for GSetService service.
// All implementations must embed UnimplementedGSetServiceServer
// for forward compatibility
type GSetServiceServer interface {
	SAdd(context.Context, *SAddRequest) (*EmptyResponse, error)
	SAdds(context.Context, *SAddsRequest) (*EmptyResponse, error)
	SRem(context.Context, *SRemRequest) (*EmptyResponse, error)
	SRems(context.Context, *SRemsRequest) (*EmptyResponse, error)
	SCard(context.Context, *SCardRequest) (*SCardResponse, error)
	SMembers(context.Context, *SMembersRequest) (*SMembersResponse, error)
	SIsMember(context.Context, *SIsMemberRequest) (*SIsMemberResponse, error)
	SUnion(context.Context, *SUnionRequest) (*SUnionResponse, error)
	SInter(context.Context, *SInterRequest) (*SInterResponse, error)
	SDiff(context.Context, *SDiffRequest) (*SDiffResponse, error)
	SUnionStore(context.Context, *SUnionStoreRequest) (*EmptyResponse, error)
	SInterStore(context.Context, *SInterStoreRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedGSetServiceServer()
}

// UnimplementedGSetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGSetServiceServer struct {
}

func (UnimplementedGSetServiceServer) SAdd(context.Context, *SAddRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SAdd not implemented")
}
func (UnimplementedGSetServiceServer) SAdds(context.Context, *SAddsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SAdds not implemented")
}
func (UnimplementedGSetServiceServer) SRem(context.Context, *SRemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SRem not implemented")
}
func (UnimplementedGSetServiceServer) SRems(context.Context, *SRemsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SRems not implemented")
}
func (UnimplementedGSetServiceServer) SCard(context.Context, *SCardRequest) (*SCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCard not implemented")
}
func (UnimplementedGSetServiceServer) SMembers(context.Context, *SMembersRequest) (*SMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMembers not implemented")
}
func (UnimplementedGSetServiceServer) SIsMember(context.Context, *SIsMemberRequest) (*SIsMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SIsMember not implemented")
}
func (UnimplementedGSetServiceServer) SUnion(context.Context, *SUnionRequest) (*SUnionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SUnion not implemented")
}
func (UnimplementedGSetServiceServer) SInter(context.Context, *SInterRequest) (*SInterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SInter not implemented")
}
func (UnimplementedGSetServiceServer) SDiff(context.Context, *SDiffRequest) (*SDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDiff not implemented")
}
func (UnimplementedGSetServiceServer) SUnionStore(context.Context, *SUnionStoreRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SUnionStore not implemented")
}
func (UnimplementedGSetServiceServer) SInterStore(context.Context, *SInterStoreRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SInterStore not implemented")
}
func (UnimplementedGSetServiceServer) mustEmbedUnimplementedGSetServiceServer() {}

// UnsafeGSetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GSetServiceServer will
// result in compilation errors.
type UnsafeGSetServiceServer interface {
	mustEmbedUnimplementedGSetServiceServer()
}

func RegisterGSetServiceServer(s grpc.ServiceRegistrar, srv GSetServiceServer) {
	s.RegisterService(&GSetService_ServiceDesc, srv)
}

func _GSetService_SAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SAdd(ctx, req.(*SAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SAdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SAdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SAdds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SAdds(ctx, req.(*SAddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SRem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SRem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SRem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SRem(ctx, req.(*SRemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SRems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SRems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SRems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SRems(ctx, req.(*SRemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SCard(ctx, req.(*SCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SMembers(ctx, req.(*SMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SIsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SIsMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SIsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SIsMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SIsMember(ctx, req.(*SIsMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SUnionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SUnion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SUnion(ctx, req.(*SUnionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SInter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SInterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SInter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SInter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SInter(ctx, req.(*SInterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SDiff(ctx, req.(*SDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SUnionStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SUnionStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SUnionStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SUnionStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SUnionStore(ctx, req.(*SUnionStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSetService_SInterStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SInterStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSetServiceServer).SInterStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gset.GSetService/SInterStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSetServiceServer).SInterStore(ctx, req.(*SInterStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GSetService_ServiceDesc is the grpc.ServiceDesc for GSetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GSetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gset.GSetService",
	HandlerType: (*GSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SAdd",
			Handler:    _GSetService_SAdd_Handler,
		},
		{
			MethodName: "SAdds",
			Handler:    _GSetService_SAdds_Handler,
		},
		{
			MethodName: "SRem",
			Handler:    _GSetService_SRem_Handler,
		},
		{
			MethodName: "SRems",
			Handler:    _GSetService_SRems_Handler,
		},
		{
			MethodName: "SCard",
			Handler:    _GSetService_SCard_Handler,
		},
		{
			MethodName: "SMembers",
			Handler:    _GSetService_SMembers_Handler,
		},
		{
			MethodName: "SIsMember",
			Handler:    _GSetService_SIsMember_Handler,
		},
		{
			MethodName: "SUnion",
			Handler:    _GSetService_SUnion_Handler,
		},
		{
			MethodName: "SInter",
			Handler:    _GSetService_SInter_Handler,
		},
		{
			MethodName: "SDiff",
			Handler:    _GSetService_SDiff_Handler,
		},
		{
			MethodName: "SUnionStore",
			Handler:    _GSetService_SUnionStore_Handler,
		},
		{
			MethodName: "SInterStore",
			Handler:    _GSetService_SInterStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/proto/gset/db.proto",
}
