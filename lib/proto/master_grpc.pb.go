// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: lib/proto/master.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterGrpcServiceClient is the client API for MasterGrpcService dbs.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterGrpcServiceClient interface {
	Get(ctx context.Context, in *MasterGetRequest, opts ...grpc.CallOption) (*MasterGetResponse, error)
	Set(ctx context.Context, in *MasterSetRequest, opts ...grpc.CallOption) (*MasterSetResponse, error)
	Del(ctx context.Context, in *MasterDelRequest, opts ...grpc.CallOption) (*MasterDelResponse, error)
	Keys(ctx context.Context, in *MasterKeysRequest, opts ...grpc.CallOption) (*MasterKeysResponse, error)
	Scan(ctx context.Context, in *MasterScanRequest, opts ...grpc.CallOption) (*MasterScanResponse, error)
	Expire(ctx context.Context, in *MasterExpireRequest, opts ...grpc.CallOption) (*MasterExpireResponse, error)
	TTL(ctx context.Context, in *MasterTTLRequest, opts ...grpc.CallOption) (*MasterTTLResponse, error)
	Ping(ctx context.Context, in *MasterPingRequest, opts ...grpc.CallOption) (*MasterPingResponse, error)
	Shutdown(ctx context.Context, in *MasterShutdownRequest, opts ...grpc.CallOption) (*MasterShutdownResponse, error)
	RegisterSlave(ctx context.Context, in *MasterRegisterSlaveRequest, opts ...grpc.CallOption) (*MasterRegisterSlaveResponse, error)
	CurrentLeader(ctx context.Context, in *MasterCurrentLeaderRequest, opts ...grpc.CallOption) (*MasterCurrentLeaderResponse, error)
	ReceiveHeartbeat(ctx context.Context, in *MasterHeartbeatRequest, opts ...grpc.CallOption) (*MasterHeartbeatResponse, error)
}

type masterGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterGrpcServiceClient(cc grpc.ClientConnInterface) MasterGrpcServiceClient {
	return &masterGrpcServiceClient{cc}
}

func (c *masterGrpcServiceClient) Get(ctx context.Context, in *MasterGetRequest, opts ...grpc.CallOption) (*MasterGetResponse, error) {
	out := new(MasterGetResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) Set(ctx context.Context, in *MasterSetRequest, opts ...grpc.CallOption) (*MasterSetResponse, error) {
	out := new(MasterSetResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) Del(ctx context.Context, in *MasterDelRequest, opts ...grpc.CallOption) (*MasterDelResponse, error) {
	out := new(MasterDelResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) Keys(ctx context.Context, in *MasterKeysRequest, opts ...grpc.CallOption) (*MasterKeysResponse, error) {
	out := new(MasterKeysResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) Scan(ctx context.Context, in *MasterScanRequest, opts ...grpc.CallOption) (*MasterScanResponse, error) {
	out := new(MasterScanResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) Expire(ctx context.Context, in *MasterExpireRequest, opts ...grpc.CallOption) (*MasterExpireResponse, error) {
	out := new(MasterExpireResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Expire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) TTL(ctx context.Context, in *MasterTTLRequest, opts ...grpc.CallOption) (*MasterTTLResponse, error) {
	out := new(MasterTTLResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/TTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) Ping(ctx context.Context, in *MasterPingRequest, opts ...grpc.CallOption) (*MasterPingResponse, error) {
	out := new(MasterPingResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) Shutdown(ctx context.Context, in *MasterShutdownRequest, opts ...grpc.CallOption) (*MasterShutdownResponse, error) {
	out := new(MasterShutdownResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) RegisterSlave(ctx context.Context, in *MasterRegisterSlaveRequest, opts ...grpc.CallOption) (*MasterRegisterSlaveResponse, error) {
	out := new(MasterRegisterSlaveResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/RegisterSlave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) CurrentLeader(ctx context.Context, in *MasterCurrentLeaderRequest, opts ...grpc.CallOption) (*MasterCurrentLeaderResponse, error) {
	out := new(MasterCurrentLeaderResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/CurrentLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterGrpcServiceClient) ReceiveHeartbeat(ctx context.Context, in *MasterHeartbeatRequest, opts ...grpc.CallOption) (*MasterHeartbeatResponse, error) {
	out := new(MasterHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/cluster.MasterGrpcService/ReceiveHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterGrpcServiceServer is the server API for MasterGrpcService dbs.
// All implementations must embed UnimplementedMasterGrpcServiceServer
// for forward compatibility
type MasterGrpcServiceServer interface {
	Get(context.Context, *MasterGetRequest) (*MasterGetResponse, error)
	Set(context.Context, *MasterSetRequest) (*MasterSetResponse, error)
	Del(context.Context, *MasterDelRequest) (*MasterDelResponse, error)
	Keys(context.Context, *MasterKeysRequest) (*MasterKeysResponse, error)
	Scan(context.Context, *MasterScanRequest) (*MasterScanResponse, error)
	Expire(context.Context, *MasterExpireRequest) (*MasterExpireResponse, error)
	TTL(context.Context, *MasterTTLRequest) (*MasterTTLResponse, error)
	Ping(context.Context, *MasterPingRequest) (*MasterPingResponse, error)
	Shutdown(context.Context, *MasterShutdownRequest) (*MasterShutdownResponse, error)
	RegisterSlave(context.Context, *MasterRegisterSlaveRequest) (*MasterRegisterSlaveResponse, error)
	CurrentLeader(context.Context, *MasterCurrentLeaderRequest) (*MasterCurrentLeaderResponse, error)
	ReceiveHeartbeat(context.Context, *MasterHeartbeatRequest) (*MasterHeartbeatResponse, error)
	mustEmbedUnimplementedMasterGrpcServiceServer()
}

// UnimplementedMasterGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterGrpcServiceServer struct {
}

func (UnimplementedMasterGrpcServiceServer) Get(context.Context, *MasterGetRequest) (*MasterGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMasterGrpcServiceServer) Set(context.Context, *MasterSetRequest) (*MasterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMasterGrpcServiceServer) Del(context.Context, *MasterDelRequest) (*MasterDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedMasterGrpcServiceServer) Keys(context.Context, *MasterKeysRequest) (*MasterKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedMasterGrpcServiceServer) Scan(context.Context, *MasterScanRequest) (*MasterScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedMasterGrpcServiceServer) Expire(context.Context, *MasterExpireRequest) (*MasterExpireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expire not implemented")
}
func (UnimplementedMasterGrpcServiceServer) TTL(context.Context, *MasterTTLRequest) (*MasterTTLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TTL not implemented")
}
func (UnimplementedMasterGrpcServiceServer) Ping(context.Context, *MasterPingRequest) (*MasterPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMasterGrpcServiceServer) Shutdown(context.Context, *MasterShutdownRequest) (*MasterShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedMasterGrpcServiceServer) RegisterSlave(context.Context, *MasterRegisterSlaveRequest) (*MasterRegisterSlaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSlave not implemented")
}
func (UnimplementedMasterGrpcServiceServer) CurrentLeader(context.Context, *MasterCurrentLeaderRequest) (*MasterCurrentLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentLeader not implemented")
}
func (UnimplementedMasterGrpcServiceServer) ReceiveHeartbeat(context.Context, *MasterHeartbeatRequest) (*MasterHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveHeartbeat not implemented")
}
func (UnimplementedMasterGrpcServiceServer) mustEmbedUnimplementedMasterGrpcServiceServer() {}

// UnsafeMasterGrpcServiceServer may be embedded to opt out of forward compatibility for this dbs.
// Use of this interface is not recommended, as added methods to MasterGrpcServiceServer will
// result in compilation errors.
type UnsafeMasterGrpcServiceServer interface {
	mustEmbedUnimplementedMasterGrpcServiceServer()
}

func RegisterMasterGrpcServiceServer(s grpc.ServiceRegistrar, srv MasterGrpcServiceServer) {
	s.RegisterService(&MasterGrpcService_ServiceDesc, srv)
}

func _MasterGrpcService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Get(ctx, req.(*MasterGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Set(ctx, req.(*MasterSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Del(ctx, req.(*MasterDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Keys(ctx, req.(*MasterKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Scan(ctx, req.(*MasterScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_Expire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Expire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Expire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Expire(ctx, req.(*MasterExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_TTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterTTLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).TTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/TTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).TTL(ctx, req.(*MasterTTLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Ping(ctx, req.(*MasterPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).Shutdown(ctx, req.(*MasterShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_RegisterSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterRegisterSlaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).RegisterSlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/RegisterSlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).RegisterSlave(ctx, req.(*MasterRegisterSlaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_CurrentLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterCurrentLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).CurrentLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/CurrentLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).CurrentLeader(ctx, req.(*MasterCurrentLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterGrpcService_ReceiveHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterGrpcServiceServer).ReceiveHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.MasterGrpcService/ReceiveHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterGrpcServiceServer).ReceiveHeartbeat(ctx, req.(*MasterHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterGrpcService_ServiceDesc is the grpc.ServiceDesc for MasterGrpcService dbs.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.MasterGrpcService",
	HandlerType: (*MasterGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MasterGrpcService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _MasterGrpcService_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _MasterGrpcService_Del_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _MasterGrpcService_Keys_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _MasterGrpcService_Scan_Handler,
		},
		{
			MethodName: "Expire",
			Handler:    _MasterGrpcService_Expire_Handler,
		},
		{
			MethodName: "TTL",
			Handler:    _MasterGrpcService_TTL_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MasterGrpcService_Ping_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _MasterGrpcService_Shutdown_Handler,
		},
		{
			MethodName: "RegisterSlave",
			Handler:    _MasterGrpcService_RegisterSlave_Handler,
		},
		{
			MethodName: "CurrentLeader",
			Handler:    _MasterGrpcService_CurrentLeader_Handler,
		},
		{
			MethodName: "ReceiveHeartbeat",
			Handler:    _MasterGrpcService_ReceiveHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/proto/master.proto",
}
